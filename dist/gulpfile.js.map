{"version":3,"sources":["gulpfile.js"],"names":[],"mappings":"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","file":"gulpfile.js","sourcesContent":["import del from 'del';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport mocha from 'gulp-mocha';\nimport istanbul from 'gulp-babel-istanbul';\nimport merge from 'merge-stream';\nimport glob from 'globby';\n\nimport canonical, {\n    lintFiles,\n    getFormatter\n} from 'canonical';\n\n/**\n * @param {Object} gulp\n * @returns {undefined}\n */\nexport default (gulp) => {\n    let watching;\n\n    watching = false;\n\n    gulp.task('pragmatist:lint', () => {\n        return glob([\n                './src/**/*.js',\n                './tests/**/*.js'\n            ])\n            .then((paths) => {\n                let formatter,\n                    report;\n\n                formatter = getFormatter();\n                report = lintFiles(paths);\n\n                if (report.errorCount || report.warningCount) {\n                    console.log(formatter(report));\n                }\n            });\n    });\n\n    gulp.task('pragmatist:clean', ['pragmatist:lint'], () => {\n        return del('./dist');\n    });\n\n    gulp.task('pragmatist:copy', ['pragmatist:clean'], () => {\n        return gulp\n            .src('./src/**/*')\n            .pipe(gulp.dest('./dist'));\n    });\n\n    gulp.task('pragmatist:build', ['pragmatist:copy'], () => {\n        return gulp\n            .src('./src/**/*.js')\n            .pipe(sourcemaps.init())\n            .pipe(babel({\n                plugins: [\n                    'lodash'\n                ]\n            }))\n            .pipe(sourcemaps.write('.'))\n            .pipe(gulp.dest('./dist'));\n    });\n\n    gulp.task('pragmatist:test', ['pragmatist:build'], (done) => {\n        merge(\n            gulp\n                .src('./src/**/*.js')\n                .pipe(istanbul()),\n            gulp\n                .src('./tests/**/*.js')\n                .pipe(babel())\n        )\n            .pipe(istanbul.hookRequire())\n            .on('finish', () => {\n                gulp\n                    .src('./tests/**/*.js')\n                    .pipe(mocha())\n                    .on('error', function (error) {\n                        console.error('error', error);\n\n                        if (!watching) {\n                            return;\n                        }\n\n                        this.emit('end');\n                    })\n                    .pipe(istanbul.writeReports())\n                    .on('end', () => {\n                        done();\n                    });\n            });\n    });\n\n    gulp.task('pragmatist:watch', () => {\n        watching = true;\n\n        gulp.watch(['./src/**/*', './tests/**/*'], ['pragmatist:default']);\n        // How to join multiple watch tasks?\n        // gulp.watch(['./**/*.scss'], ['scss']);\n    });\n\n    gulp.task('pragmatist:default', ['pragmatist:test']);\n};\n"],"sourceRoot":"/source/"}